@import "function";
@import "../common/var";


/* Break-points 断点 
 -------------------------- */
@mixin res($key, $map: $breakpoints) {
  // 循环断点Map，如果存在则返回
  @if map-has-key($map, $key) {
    @media only screen and #{inspect(map-get($map, $key))} {
      @content;
    }
  } @else {
    @warn "Undefeined points: `#{$map}`";
  }
}

/* Scrollbar 滚动条
 -------------------------- */
@mixin scroll-bar {
  // 滚动条颜色
  $scrollbar-thumb-background: #b4bccc;
  // 滚动条背景
  $scrollbar-track-background: #fff;

  // -webkit-代表safari、chrome私有属性  滚动条
  &::-webkit-scrollbar {
    z-index: 11;
    width: 6px;
    // 水平宽度
    &:horizontal {
      height: 6px;
    }
    // 滑块样式
    &-thumb {
      border-radius: 5px;
      width: 6px;
      background: $scrollbar-thumb-background;
    }
    // 边框样式
    &-corner {
      background: $scrollbar-track-background;
    }
    // 轨道样式
    &-track {
      background: $scrollbar-track-background;
      // 片段
      &-piece {
        background: $scrollbar-track-background;
        width: 6px;
      }
    }
  }
}


/* Placeholder 占位符
 -------------------------- */
@mixin placeholder {
  // chrome、safari 输入框 占位符样式
  &::-webkit-input-placeholder {
    @content
  }
  // firefox浏览器 占位符样式
  &::-moz-placeholder {
    @content
  }
  // IE浏览器 占位符样式
  &:-ms-input-placeholder {
    @content
  }
}

/* BEM 组织方式
 -------------------------- */
//  CSS 块
@mixin b($block) {
  // @namespace 是用来定义使用在CSS样式表中的XML命名空间的@规则
  $B: $namespace+'-'+$block !global;

  .#{$B} {
    @content;
  }
}

// 元素
@mixin e($element) {
  $E: $element !global;
  // &这是sass的语法，代表上一级选择器
  $selector: &;
  // 指链接的样式名选择器
  $currentSelector: "";
  @each $unit in $element {
    $currentSelector: #{$currentSelector + "." + $B + $element-separator + $unit + ","};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: "";
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + & + $modifier-separator + $unit + ","};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@mixin configurable-m($modifier, $E-flag: false) {
  $selector: &;
  $interpolation: '';

  @if $E-flag {
    $interpolation: $element-separator + $E-flag;
  }

  @at-root {
    #{$selector} {
      .#{$B+$interpolation+$modifier-separator+$modifier} {
        @content;
      }
    }
  }
}

@mixin spec-selector($specSelector: '', $element: $E, $modifier: false, $block: $B) {
  $modifierCombo: '';

  @if $modifier {
    $modifierCombo: $modifier-separator + $modifier;
  }

  @at-root {
    #{&}#{$specSelector}.#{$block+$element-separator+$element+$modifierCombo} {
      @content
    }
  }
}

@mixin meb($modifier: false, $element: $E, $block: $B) {
  $selector: &;
  $modifierCombo: '';

  @if $modifier {
    $modifierCombo: $modifier-separator + $modifier;
  }

  @at-root {
    #{$selector} {
      .#{$block+$element-separator+$element+$modifierCombo} {
        @content
      }
    }
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

@mixin extend-rule($name) {
  @extend #{'%shared-'+$name};
}

@mixin share-rule($name) {
  $rule-name: '%shared-'+$name;

  @at-root #{$rule-name} {
    @content
  }
}

@mixin pseudo($pseudo) {
  @at-root #{&}#{':#{$pseudo}'} {
    @content
  }
}

